#!/usr/bin/env python
from __future__ import print_function

import roslib
roslib.load_manifest('opencvtest')
import sys
import rospy
import cv2
import numpy as np
from math import *
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

#  Mask the side walk
def mask_image(iframe):
    hsv = cv2.cvtColor(iframe, cv2.COLOR_BGR2HSV)
    ret, thresh = cv2.threshold(hsv, 240, 255, cv2.THRESH_BINARY)
    iframe[thresh == 255] = 0
    #lower_gray = np.array([3, 4, 21], dtype="uint8") #allgrass, allsnow
    lower_gray = np.array([0, 0, 0], dtype="uint8") # 1x, 1.5x
    #upper_gray = np.array([30, 40, 220], dtype="uint8")
    #upper_gray = np.array([200, 30, 220], dtype="uint8") #1x
    upper_gray = np.array([170, 80, 190], dtype="uint8") #1.5x, 1x
    #upper_gray = np.array([60, 50, 240], dtype="uint8")
    #upper_gray = np.array([40, 60, 200], dtype="uint8") #allgrass, allsnow

    mask_gr = cv2.inRange(hsv, lower_gray, upper_gray)
    mask_gr_img = cv2.bitwise_and(iframe, iframe, mask=mask_gr)

    return mask_gr_img


#  Otsus Binarization for thresholding
def otsuBin(img):
    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    # Otsu's thresholding after Gaussian filtering
    blur = cv2.GaussianBlur(img, (5, 5), 10)
    ret3, th3 = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    return th3


#  Return the midpoint of the lane
#  Returns x(col), y(row), h(image height, row), r(image width, col)
def averageMidPoint(img, y):
    masked = mask_image(img)
    ost = otsuBin(masked)
    h, w, r = img.shape
    index = np.where(ost[y][:] == 255)
    x = index[0]
    avgX = np.average(x)
    if isnan(avgX) is False:
        cv2.line(masked, (int(w/2), int(h)), (int(avgX), y), [255, 255, 0], 8)
        return masked, avgX, y, h, w
    else:
        return masked, h/2, w/2, h, w

class image_converter:

  def __init__(self):
    self.image_pub_dir = rospy.Publisher("/dir",String)
    self.image_pub = rospy.Publisher("/camera/rgb/test",Image)

    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("/camera/rgb/image_rect_color",Image,self.callback)
    print("it vorks!")
  def callback(self,data):
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    except CvBridgeError as e:
      print(e)

    (rows,cols,channels) = cv_image.shape
    res, x, y, h, w = averageMidPoint(cv_image, 200)
    print(x, y, h, w)
    #print(frame[int(y)][int(x)][:])
    #cv2.imshow("Image window", res)
    #cv2.waitKey(3)
    dir = (x*2/w) - 1
    self.image_pub_dir.publish(str(dir))
    try:
      self.image_pub.publish(self.bridge.cv2_to_imgmsg(res, "bgr8"))
    except CvBridgeError as e:
      print(e)

def main(args):
  ic = image_converter()
  rospy.init_node('image_converter', anonymous=True)
  try:
    rospy.spin()
  except KeyboardInterrupt:
    print("Shutting down")
  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
